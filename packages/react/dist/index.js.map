{"version":3,"sources":["../src/index.tsx","../src/components/PageBuilder.tsx"],"sourcesContent":["export { PageBuilderReact } from './components/PageBuilder';","import React, { useEffect, useRef } from \"react\";\r\n\r\ninterface PageBuilderConfig {\r\n  theme?: string;\r\n  grid?: boolean;\r\n  components: Record<string, any>;\r\n}\r\n\r\ninterface PageBuilderReactProps {\r\n  config: PageBuilderConfig;\r\n  reactComponents: Record<string, React.FC<any>>;\r\n}\r\n\r\nexport const PageBuilderReact: React.FC<PageBuilderReactProps> = ({ config, reactComponents }) => {\r\n  const builderRef = useRef<HTMLElement>(null);\r\n  useEffect(() => {\r\n    // Dynamically import the web component\r\n    import(\"web-component\").catch(error => {\r\n      console.error(\"Failed to load web component:\", error);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (builderRef.current) {\r\n      console.log(\"Config in React wrapper:\", config);\r\n      console.log(\"React Components in React wrapper:\", reactComponents);\r\n\r\n      builderRef.current.setAttribute(\"config-data\", JSON.stringify(config)); // Pass serializable config\r\n      (builderRef.current as any).reactComponents = reactComponents; // Pass React components separately\r\n    }\r\n  }, [config, reactComponents]);\r\n\r\n  return <page-builder ref={builderRef} />;\r\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAAyC;AAalC,IAAM,mBAAoD,CAAC,EAAE,QAAQ,gBAAgB,MAAM;AAChG,QAAM,iBAAa,qBAAoB,IAAI;AAC3C,8BAAU,MAAM;AAEd,WAAO,eAAe,EAAE,MAAM,WAAS;AACrC,cAAQ,MAAM,iCAAiC,KAAK;AAAA,IACtD,CAAC;AAAA,EACH,GAAG,CAAC,CAAC;AAEL,8BAAU,MAAM;AACd,QAAI,WAAW,SAAS;AACtB,cAAQ,IAAI,4BAA4B,MAAM;AAC9C,cAAQ,IAAI,sCAAsC,eAAe;AAEjE,iBAAW,QAAQ,aAAa,eAAe,KAAK,UAAU,MAAM,CAAC;AACrE,MAAC,WAAW,QAAgB,kBAAkB;AAAA,IAChD;AAAA,EACF,GAAG,CAAC,QAAQ,eAAe,CAAC;AAE5B,SAAO,6BAAAA,QAAA,cAAC,kBAAa,KAAK,YAAY;AACxC;","names":["React"]}