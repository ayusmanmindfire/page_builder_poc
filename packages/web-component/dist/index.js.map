{"version":3,"sources":["../src/PageBuilder.ts"],"sourcesContent":["import { PageBuilderCore } from \"core\";\r\n\r\nclass PageBuilderElement extends HTMLElement {\r\n  private core: PageBuilderCore | null = null;\r\n  private initialized = false;\r\n  private _config: { components: Record<string, any> } = { components: {} };\r\n  private _reactComponents = {}; // Storing React components\r\n\r\n  private template = `<div id=\"app\">\r\n      <div id=\"sidebar\"></div>\r\n      <div id=\"canvas\" class=\"canvas\"></div>\r\n      <div id=\"customization\">\r\n        <h4 id=\"component-name\">Component: None</h4>\r\n        <div id=\"controls\"></div>\r\n        <div id=\"layers-view\" class=\"hidden\"></div>\r\n      </div>\r\n      <div id=\"notification\" class=\"notification hidden\"></div>\r\n      <div id=\"dialog\" class=\"dialog hidden\">\r\n        <div class=\"dialog-content\">\r\n          <p id=\"dialog-message\"></p>\r\n          <button id=\"dialog-yes\" class=\"dialog-btn\">Yes</button>\r\n          <button id=\"dialog-no\" class=\"dialog-btn\">No</button>\r\n        </div>\r\n      </div>\r\n    </div>`;\r\n\r\n  constructor() {\r\n    super();\r\n    // Set inner HTML only if no child elements exist\r\n    if (!this.firstElementChild) {\r\n      this.innerHTML = this.template;\r\n    }\r\n  }\r\n\r\n  static get observedAttributes() {\r\n    return [\"config-data\"];\r\n  }\r\n\r\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\r\n    if (name === \"config-data\" && newValue !== oldValue) {\r\n      try {\r\n        const parsedConfig = JSON.parse(newValue);\r\n        this._config = parsedConfig;\r\n        console.log(\"Config received in Web Component:\", parsedConfig);\r\n        console.log(\"react components in Web Component:\", this.reactComponents);\r\n        this.initializeCore(); // Reinitialize Core when config changes\r\n      } catch (e) {\r\n        console.error(\" Failed to parse config:\", e);\r\n      }\r\n    }\r\n  }\r\n\r\n  set reactComponents(value) {\r\n    this._reactComponents = value;\r\n    // this.initializeCore(); // Reinitialize Core when React components change\r\n  }\r\n\r\n  get reactComponents() {\r\n    return this._reactComponents;\r\n  }\r\n\r\n  // Ensures Core gets updated values (No updateConfig method)\r\n  initializeCore() {\r\n    if (this.initialized) {\r\n      return;\r\n    }\r\n    this.initialized=true;\r\n    this.core = new PageBuilderCore(this._config, this.reactComponents);\r\n  }\r\n\r\n  connectedCallback() {\r\n    if (this.initialized) {\r\n      return;\r\n    }\r\n    console.log(\" Web Component Mounted\");\r\n    this.initializeCore();\r\n  }\r\n\r\n}\r\n\r\nif (!customElements.get(\"page-builder\")) {\r\n  customElements.define(\"page-builder\", PageBuilderElement);\r\n}"],"mappings":";AAAA,SAAS,uBAAuB;AAEhC,IAAM,qBAAN,cAAiC,YAAY;AAAA,EAwB3C,cAAc;AACZ,UAAM;AAxBR,SAAQ,OAA+B;AACvC,SAAQ,cAAc;AACtB,SAAQ,UAA+C,EAAE,YAAY,CAAC,EAAE;AACxE,SAAQ,mBAAmB,CAAC;AAE5B;AAAA,SAAQ,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBjB,QAAI,CAAC,KAAK,mBAAmB;AAC3B,WAAK,YAAY,KAAK;AAAA,IACxB;AAAA,EACF;AAAA,EAEA,WAAW,qBAAqB;AAC9B,WAAO,CAAC,aAAa;AAAA,EACvB;AAAA,EAEA,yBAAyB,MAAc,UAAkB,UAAkB;AACzE,QAAI,SAAS,iBAAiB,aAAa,UAAU;AACnD,UAAI;AACF,cAAM,eAAe,KAAK,MAAM,QAAQ;AACxC,aAAK,UAAU;AACf,gBAAQ,IAAI,qCAAqC,YAAY;AAC7D,gBAAQ,IAAI,sCAAsC,KAAK,eAAe;AACtE,aAAK,eAAe;AAAA,MACtB,SAAS,GAAG;AACV,gBAAQ,MAAM,4BAA4B,CAAC;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAI,gBAAgB,OAAO;AACzB,SAAK,mBAAmB;AAAA,EAE1B;AAAA,EAEA,IAAI,kBAAkB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,iBAAiB;AACf,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AACA,SAAK,cAAY;AACjB,SAAK,OAAO,IAAI,gBAAgB,KAAK,SAAS,KAAK,eAAe;AAAA,EACpE;AAAA,EAEA,oBAAoB;AAClB,QAAI,KAAK,aAAa;AACpB;AAAA,IACF;AACA,YAAQ,IAAI,wBAAwB;AACpC,SAAK,eAAe;AAAA,EACtB;AAEF;AAEA,IAAI,CAAC,eAAe,IAAI,cAAc,GAAG;AACvC,iBAAe,OAAO,gBAAgB,kBAAkB;AAC1D;","names":[]}